[{"id":"wordletoy_-_frontend","timestamp":1686430800,"title":"WordleToy - Frontend","description":"En esta publicación contaré el proceso de desarrollo de una pequeña recreación del famoso juego \"Wordle\" dividido en backend y frontend","date":"June 10, 2023 18:00:00","modified_date":"","content":"\n# WordleToy Frontend\n\n![Wordle](https://github.com/Elias288/ElelisPage/blob/main/docs/src/assets/wordle.jpg?raw=true)\n\n\n<br>\n\n---\n\n## Introducción\n\nEl siguiente post se hará una explicacion del proceso de desarrollo del proyecto [WordleToy](https://github.com/Elias288/WordleToy/tree/master/wordleBackend).\n\nEn este post se explicará el desarrollo del Frontend del juego usando el framwork Vite + React con typescript que se conectará al [backend](#/blog/post/wordletoy_-_backend) que se construyó para el juego.\n\nPara este proyecto se usó este árbol de directorios\n\n```sh\nWordleFrontend\n  │\n  ├── src\n  │   │\n  │   ├─ api\n  │   │   └─ wordle.api.ts\n  │   │  \n  │   ├─ components\n  |   |   ├─ Wordle.tsx\n  │   │   ├─ WordleForm.tsx\n  |   |   └─ WordleItem.tsx\n  │   │\n  │   ├─ context\n  │   │   ├─ useWord.tsx\n  |   |   └─ WordleContext.tsx\n  │   │\n  │   ├─ intefaces\n  |   |   └─ word.interface.ts\n  │   │\n  │   ├─ App.tsx\n  │   ├─ index.css\n  │   └─ main.tsx\n  │\n  └─ index.html\n```\n\n---\n\n## Reglas del Juego\n\nEl comienzo del desarrolllo comenzó con encontrar las reglas del juego, que nos indicarán el funcionamiento básico del juego.\n\nLas reglas son:\n\n> *El objetivo del juego es adivinar una palabra secreta de cinco letras en el menor número de intentos posible. Para enviar una respuesta, escriba cualquier palabra de cinco letras y pulse Intro. Todas tus adivinanzas deben ser palabras reales, de acuerdo con un diccionario de palabras de cinco letras que Wordle permite como adivinanzas.<br>\nAl acertar una letra de la palabra en la posición correcta está se marcará de color verde y al adivinar una letra pero fuera de su posición se marcará amarilla.*\n\n<br>\n\n---\n\n## Conexión con el backend\n\nPara comenzar nuestro Frontend definiremos los llamados a nuestra API del juego en `wordle.api.ts`\n\n```ts\n// Dirección de la API\nconst API = 'http://localhost:3000/api' \n\n// Función de obtener el id de una palabra random de la bd\nexport const getRandomWordRequest = () => fetch(`${API}/word/random`)\n\n// Función de envió de palabra a la API\nexport const postWordRequest = (updatedWord: SendWord) =>\n  fetch(`${API}/game/requestWord`, {\n    method: 'POST',\n    body: JSON.stringify(updatedWord),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n```\n\n<br>\n\n---\n\n## Interfaces\n\nComo se está trabajando en Vite + React con Typescript debemos definir las intefaces que nos permitirán trabajar con los tipos de datos correctos para cada campo, de lo que la API nos devuelva.\n\nPara eso, en `word.interface.ts` definiremos nuestra interfaz `Word` donde estarán definidos todos sus campos que si recordamos es lo que retorna la función `requestWord`. del backend\n\n```ts\n// word.interface.ts\nexport interface Word {\n  wordId: string;\n  updatedWord: string;\n  attempts: number;\n  attemptsCount: number;\n  letters: Array<Letter>;\n  done: boolean;\n}\n\nexport interface Letter {\n  letter: string;\n  status: number;\n}\n```\n\nComo esta interfaz la vamos a usar tambien para recibir el id de una palabra random y tambien para enviar una respuesta al backend, necesitamos indicarle que datos serán necesarios y no para cada caso, de la siguiente forma.\n\n- En el caso de la palabra random solo se recibe la id, asi que se omiten todos los demás campos.\n- En el caso de enviar una respuesta, omitiremos el array de letras y el estado.\n\n```ts\n// word.interface.ts\nexport type RandomWord =  Omit<Word, 'updatedWord' | 'letters' | 'done' | 'attempts' | 'attemptsCount' >\nexport type SendWord = Omit<Word, 'letters' | 'done' >\n```\n\n## Contexto de Frontend\n\nPara que todos los componentes que se creen en este framework cuenten con los datos que se necesarios, crearemos un contexto que será el encargado de enviar y recibir datos con el backend.\n\nPara eso definimos las interfaces y creamos el contexto:\n```tsx\n// WordleContext.tsx\ninterface Props {\n  children: React.ReactNode,\n}\ninterface WordleContextValues {\n  word: RandomWord\n  resp: Word[]\n  requestWord: (word: SendWord) => void\n  restart: () => void\n}\n\nexport const WordleContext = createContext<WordleContextValues>({\n  word: { wordId: '' },\n  resp: [],\n  requestWord: () => { },\n  restart: () => { },\n})\n```\n\nY definimos nuestro contexto\n\n```tsx\n// WordleContext.tsx\nexport const WordleProvider: React.FC<Props> = ({ children }) => {\n  const [word, setWord] = useState<RandomWord>({ wordId: '' })\n  const [resp, setResp] = useState<Word[]>([])\n\n  // Obtiene una palabra random al cargar el componente\n  useEffect(() => {\n    getRandomWordRequest()\n      .then(res => res.json())\n      .then(data => setWord(data))\n}, [])\n\n  // Función que reinicia el juego\n  const restart = () => {\n    getRandomWordRequest()\n      .then(res => res.json())\n      .then(data => setWord(data))\n    setResp([])\n  }\n\n  // Función que recibe una palabra y consulta si se acertó\n  const requestWord = async (word: SendWord) => {\n    const res = await postWordRequest(word);\n    const data = await res.json();\n    setResp([...resp, data]);\n  }\n\n  return (\n    <WordleContext.Provider\n      value={{\n        word,\n        resp,\n        requestWord,\n        restart\n      }}\n    >\n      {children}\n    </WordleContext.Provider>\n  )\n}\n```\n\nTodos los componentes que estén dentro de este \"Contexto\" podrán acceder a sus variables y funciones.\n\n## Presentación del juego\n\nYa con toda la logica interna definida, podemos empezar a trabajar en la presentación del juego, lo que va a ver el jugado.\n\n### WordleItem\n\nEmpezando por el item, aquí se tomará cada letra que llegue junto con su estado y dependiendo si este es 0, 1 o 2 se le dará un color. Recordando que:\n- 0 indica que la letra no está en la palabra, se lo deja en gris.\n- 1 indica que la letra está en la palabra y en la posición correcta y se le asigna el color verde.\n- 2 indica que la letra está en la palabra pero no en la posición correcta y se le asigna el color amarillo.\n\n```tsx\ninterface Props {\n  word: Letter\n}\n\nfunction WordleItem({ word }: Props) {\n  return (\n    word.status === 0 ? (\n      <div className=\"bg-zinc-500 flex-auto text-center p-2 w-10 rounded-lg uppercase\" >\n        {word.letter}\n      </div>\n    ) : (\n      word.status === 1 ? (\n        <div className=\"bg-green-500 flex-auto text-center p-2 w-10 rounded-lg uppercase\" >\n          {word.letter}\n        </div>\n      ) : (\n        <div className=\"bg-yellow-500 flex-auto text-center p-2 w-10 rounded-lg uppercase\" >\n          {word.letter}\n        </div>\n      )\n    )\n  );\n}\n\nexport default WordleItem;\n```\n\n### WordleForm\n\nLo importante del Form es llamar a las funciones del contexto que permita enviar la palabra ingresada, recibir y mostrar la respuesta del backend. Aqui un ejemplo reducido del formulario\n\n```tsx\nfunction WordleForm() {\n  const { resp, word, requestWord, restart } = useWord()\n  const [attempts, setattempts] = useState<number>(4)\n  const [attemptsCount, setattemptsCount] = useState<number>(0)\n  const [updatedWord, setUpdatedWord] = useState({\n    input1: '', input2: '', input3: '', input4: '', input5: '',\n  })\n  ...\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    // solo permitir letras\n    const result = e.target.value.replace(/[^abcdefghijklmnñopqrstuvwxyz]/gi, '');\n    // guardar cada letra para despúes formar la palabra\n    setUpdatedWord({ ...updatedWord, [e.target.name]: result })\n    ...\n  }\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    // reducir cada intento\n    setattempts(attempts - 1)\n    // y sumar la cantidad de intentos\n    setattemptsCount(attemptsCount + 1)\n    // verificar que no haya espacios vacios\n    if (updatedWord.input1 !== '' && updatedWord.input2 !== '' && updatedWord.input3 !== '' && updatedWord.input4 !== '' && updatedWord.input5 !== '') {\n      // formar la palabra\n      const sendUpdatedWord = `${updatedWord.input1}${updatedWord.input2}${updatedWord.input3}${updatedWord.input4}${updatedWord.input5}`\n\n      // enviar la respuesta al backend\n      requestWord({\n        wordId: word.wordId,\n        updatedWord: sendUpdatedWord,\n        attempts,\n        attemptsCount\n      })\n\n      ...\n    }\n  }\n\n  return (\n    <>\n      {\n        resp.length > 0 && !resp[resp.length - 1].done || resp.length === 0 ? (\n          <form onSubmit={handleSubmit} >\n            <div className=\"inline-flex w-full text-white bg-zinc-700 justify-center box-border gap-x-1\" >\n              <input\n                  type=\"text\"\n                  value={updatedWord.input1}\n                  className=\"bg-zinc-500 flex-auto text-center p-2 w-10 rounded-lg uppercase\"\n                  name=\"input1\"\n                  onChange={handleChange}\n                  onKeyUp={changeFocus}\n                  maxLength={1}\n                  ...\n                  autoFocus\n              />\n              ...\n              <button></button>\n            </div>\n          </form>\n        ) : (\n          <>\n            <button className=\"bg-blue-500 p-2 text-white rounded-md hover:bg-blue-700\" onClick={restartAll} > Restart </button>\n          </>\n        )\n      }\n    </>\n  )\n}\n\nexport default WordleForm;\n```\n\n\n### Wordle\n\nPor último el componente que engloba las 2 anteriores, que se encargará de listar los intentos.\n\n```tsx\nfunction Wordle() {\n  const { resp } = useWord()\n\n  return (\n    <div className=\"p-4 w-[500px]\">\n      <h1 className=\"w-full font-bold text-2xl text-center pb-4\">Wordle Toy</h1>\n      <div className=\"p-2 bg-zinc-700\">\n        {\n          resp.map((words, index) => {\n            return (\n              <div key={index} className=\"inline-flex w-full pb-1 text-white justify-center box-border gap-x-1\">\n                {\n                  words.letters.map((letter, index) => {\n                    return (\n                      <WordleItem word={letter} key={index}/>\n                    )\n                  })\n                }\n              </div>\n            )\n          })\n        }\n\n        <WordleForm />\n        <p className=\"text-white\">Intentos: {resp.length === 0 ? 0 : resp[resp.length - 1].attemptsCount + 1} de 5</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Wordle;\n```\n\nResultado del Frontend, un juego terminado:\n\n![WorleFrontend](https://github.com/Elias288/ElelisPage/blob/main/docs/src/assets/WordleFrontend.png?raw=true)\n\n<br>\n\n---\n\n\n# Conclusión\n\nEn este proyecto se afrontaron muchos retos de programación y utilización tecnologías nuevas que generarón un crecimiento en el entendimiento de estas y experiencia para proximos proyectos en los que se enfrenten a retos similares. \n\nFue una experiencia interesante y más con el uso de inteligencia artifical para generar partes del código que fue una agradable sorpresa.\n\nEspero que sea de utilidad para alguien más que a mi.\n\n<small style=\"display: block; text-align: right;\">Elias Bianchi</small>\n"},{"id":"wordletoy_-_backend","timestamp":1686403020,"title":"WordleToy - Backend","description":"En esta publicación contaré el proceso de desarrollo de una pequeña recreación del famoso juego \"Wordle\" dividido en backend y frontend","date":"June 10, 2023 10:17:00","modified_date":"","content":"\n# WordleToy Backend\n\n![Wordle](https://github.com/Elias288/ElelisPage/blob/main/docs/src/assets/wordle.jpg?raw=true)\n\n\n<br>\n\n---\n\n## Introducción\n\nEl siguiente post se hará una explicacion del proceso de desarrollo del proyecto [WordleToy](https://github.com/Elias288/WordleToy/tree/master/wordleBackend) que se realizó con el objetivo de poner en practica usos de tecnologías y métodos. \n\nEn este post se explicará el desarrollo del backend para el funcionamiento del juego usando el framework NestJS y MongoDB en la base de datos.\n\nPara este proyecto se usó este árbol de directorios\n\n```sh\nWordleBackend\n  |\n  ├── src\n  |   |\n  │   ├─ dto\n  |   |   ├─ createWord.dto.ts\n  │   │   ├─ requestWord.dto.ts\n  │   │   └─ responseWord.dto.ts\n  |   |\n  │   ├─ schemas  \n  |   |   └─ word.schema.ts\n  |   |\n  │   └─ word  \n  |       ├─ word.controller.ts\n  |       ├─ word.module.ts\n  |       └─ word.service.ts\n  |\n  ├─ app.module.ts\n  └─ main.ts\n```\n\n<br>\n\n---\n\n## Reglas del Juego\n\nEl comienzo del desarrolllo comenzó con encontrar las reglas del juego, que nos indicarán el funcionamiento básico del juego.\n\nLas reglas son:\n\n> *El objetivo del juego es adivinar una palabra secreta de cinco letras en el menor número de intentos posible. Para enviar una respuesta, escriba cualquier palabra de cinco letras y pulse Intro. Todas tus adivinanzas deben ser palabras reales, de acuerdo con un diccionario de palabras de cinco letras que Wordle permite como adivinanzas.<br>\nAl acertar una letra de la palabra en la posición correcta está se marcará de color verde y al adivinar una letra pero fuera de su posición se marcará amarilla.*\n\n<br>\n\n---\n\n## Ambiente de desarrollo\n\nYa con eso en mente empecé la construcción del backend usando el framework *NextJs* haciendo uso de un ambiente de desarrollo en fedora construido en un contenedor de podman y así no tener que instalar los binarios del framework. El contenedor se generó con las siguientes instrucciones:\n\n```yaml\n# Containerfile\nFROM fedora:38                  # Usando la imagen de fedora v38\nRUN mkdir -p /usr/src/app       # Se crea un directorio \nWORKDIR /usr/src/app            # Y se lo define como el directorio de trabajo\n\nRUN dnf upgrade -y              # Actualizamos el SO\nRUN dnf install -y \\            # y empezamos a instalar todo lo que necesitaremos\n  procps && \\\n  dnf module install -y \\\n  nodejs\nRUN npm install -g npm@9.6.7 \\\n  @nestjs/cli\n```\n\n> \\* **Nota importante**: el contenedor del hambiente de desarrollo no cuenta con permisos necesarios, por lo tanto el framework se debe generar desde fuera o habilitarle los permisos necesarios a los directorios.\n\nPara generar el proyecto de nest se clonó un repositorio de github como se explica en las alternativas de instalación en la [documentación de NestJs](https://docs.nestjs.com/#installation).\n\nJunto con este \"hambiente\" en un contenedor además se necesitará una base de datos en MongoDB donde cargar todas las palabar permitidas en el juego, que tambien monté en un contenedor. \n\nPara poder gestionar esos contenedores, estos deben estar en un \"pod\".\n\nYa que todo eso es muy laborioso, para que se genere todo con un simple comando simplemente se crea un manifiesto *yaml* que se encargue de construir todos los contenedores con el comando de podman\n\n```sh\npodman play kube devEnvironment.yaml\n```\n\nEste archivo `devEnvironment.yaml` contiene las siguientes instrucciones:\n\n```yaml\n# devEnvironment.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: \"2023-05-31T13:44:16Z\"\n  labels:\n    app: wordle-pod\n  name: wordle-pod\nspec:\n  containers:\n  - name: backend\n    image: localhost/fedoradevnestjsimg:latest\n    stdin: true\n    tty: true\n    ports:\n      - containerPort: 3000\n        hostPort: 3000\n    volumeMounts:\n    - mountPath: /usr/src/app\n      name: fedoraVolume\n  - name: mongoDB\n    image: mongo\n    ports: \n      - containerPort: 27017\n        hostPort: 27017\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME: root\n      - MONGO_INITDB_ROOT_PASSWORD: dbPassword\n    volumeMounts:\n    - mountPath: /data/db\n      name: wordleMongoDb\n  volumes:\n  - name: fedoraVolume\n    hostPath:\n      path: /mnt/c/.../WordleGame/wordleBackend\n      type: Directory\n  - name: wordleMongoDb\n    persistentVolumeClaim:\n        claimName: wordleMongoDb_-_db-volume\n```\n\n> \\* **Nota importante**: en este archivo hay que definir `MONGO_INITDB_ROOT_PASSWORD` del contenedor de `mongodb` y `path` en `fedoraVolume`\n\nLa definición de los volumenes es la parte más importante ya que con ellos podremos decirle al hambiente de desarrollo en que path debe tomar los archivos que trabajaremos, y en el caso de la bd guardar la información fuera del contenedor y que podrá ser reutilizada por otros contenedores en caso de que lo necesitemos.\n\n<br>\n\n---\n\n## Backend usando Nest y MongoDB\n\nLo que sigue es una explicación de codigo:\n\n### Conectar BD\n\nComo se explicó en [ambiente para el backend](#ambiente-para-el-backend) el servidor de MongoDB está en un contenedor que expone los puertos `27017` y la conexión se realiza a traves de `mongodb://localhost:27017/<databaseName>`.\n\nPara que nuestro servidor de nestjs pueda conectarse es necesario instalar las dependencias de `mongoose` y `@nestjs/mongoose` como se explica en las [Técnicas](https://docs.nestjs.com/techniques/mongodb) de NestJs.\n\n\n```ts\n// app.modules.ts\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://localhost:27017/wordleDb'),\n  ],\n})\nexport class AppModule {}\n```\n\n### Esquema de Palabras\n\nAhora que el backend está conectado al servidor de la BD es hora de crear el esquema que nos permitirá hacer uso de las funciones de mongoose para listar, guardar, modificar y borrar registros de la BD.\n\nEn este esquema solo es necesario guardar una palabra y también controladores.\n\n```ts\n// word.schemas.ts\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n\n@Schema({\n  timestamps: true,\n})\nexport class Word {\n  @Prop({\n    required: true,\n    unique: true,\n    trim: true,\n  })\n  word: string;\n}\n\nexport const WordSchema = SchemaFactory.createForClass(Word);\n```\n\n### Modulo, Controlador y Servicios\n\nDespúes se generó la estructura de la api, empezando por el modulo `word.module.ts`, el controlador `word.controller.ts` y los servicios en `word.service.ts`.\n\nEn el modulo importaremos el esquema y el constructor:\n\n```ts\n// word.module.ts\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Word.name, schema: WordSchema }]),\n  ],\n  providers: [WordService],\n  controllers: [WordController],\n  exports: [WordService],\n})\n```\nEn los servicios se crearon las funciones básicas de listar todo, buscar por id, crear y eliminar.\n\n```ts\n// word.service.ts\n@Injectable()\nexport class WordService {\n  constructor(@InjectModel(Word.name) private wordleModel: Model<Word>) {}\n\n  findAll() {\n    return this.wordleModel.find();\n  }\n\n  findOne(id: string) {\n    return this.wordleModel.findById(id);\n  }\n\n  async create(createWord: CreateWordleDto) {\n    const newWord = new this.wordleModel(createWord);\n    return await newWord.save();\n  }\n\n  async delete(id: string) {\n    return this.wordleModel.findByIdAndDelete(id);\n  }\n}\n```\n\nLa función que traera una palabra random de todo el registro, que será la que se tendra que adivinar\n\n```ts\n// word.service.ts\nasync findRandomeOne() {\n  const randomWord = await this.wordleModel.aggregate([\n    { $sample: { size: 1 } },\n  ]);\n  return { wordId: randomWord[0]._id };\n}\n```\n\nY la función principal del juego, que es la encargada de comparar y devolver un resultado de la palabra escrita con la que se debe adiviniar.\n\nEl funcionamiento es el siguiente:\n\nLa palabra ingresada y la que se debe adivinar se divide por letra y se las recorre una a una, y por cada una se le asigna un numero del 0 al 2 dependiendo de:\n\n- Si la letra no está en la palabra a adivinar se le asigna un 0.\n- Si la letra está en la palabra y está en la posición correcta se le asigna un 1\n- Si la letra está en la palabra pero no está en la posición correcta se le asigna un 2\n\n```ts\n// word.service.ts\nasync requestWord(consult: requestWord): Promise<responseWord> {\n  const wordToGuess = await this.wordService.findOne(consult.wordId);\n  const arr = [...consult.updatedWord.split('')];\n  const wordToGuessArr = [...wordToGuess.word];\n  if (arr.length !== wordToGuessArr.length) {\n    throw new Error('Los arrays deben tener la misma longitud');\n  }\n\n  let gameStatus = true;\n  const resultado = [];\n  const wordToGuessArrCopy = wordToGuessArr.slice();\n\n  for (let i = 0; i < arr.length; i++) {\n    const caracter = arr[i];\n    let estado = 0;\n    const caracterIndex = wordToGuessArrCopy.indexOf(caracter);\n\n    if (caracterIndex !== -1) {\n      if (caracterIndex === i) {\n        estado = 1;\n      } else {\n        estado = 2;\n      }\n\n      wordToGuessArrCopy[caracterIndex] = null;\n    } else if (arr.indexOf(caracter) < i) {\n      estado = 0;\n    }\n\n    resultado.push({\n      letter: caracter,\n      status: estado,\n    });\n  }\n\n  gameStatus =\n    !resultado.some((letter) => letter.status === 0 || letter.status === 2) || consult.attempts === 0;\n\n  return {\n    wordId: consult.wordId,\n    letters: resultado,\n    attempts: consult.attempts,\n    attemptsCount: consult.attemptsCount,\n    done: gameStatus,\n  };\n}\n```\n\nEl resultado final de está función es una objeto con todos los datos necesarios que indicarán al jugador si acertó o no.\n\n```json\n{\n  \"wordId\": string, // Id de la palabra a adivinar\n  \"letters\": Array<{letter, status}>, // Letras ingresadas y su estado\n  \"attempts\": number, // Número de intentos restantes\n  \"attemptsCount\": number, // Número de intentos realizados\n  \"done\": boolean, // Indicador de juego finalizado\n}\n```\n\nUn ejemplo:\n\n```json\n{\n  \"wordId\": \"sfgdfgbs4354\",\n  \"letters\": [\n    {\n      \"letter\": \"p\",\n      \"status\": 1\n    },\n    {\n      \"letter\": \"e\",\n      \"status\": 1\n    },\n    {\n      \"letter\": \"r\",\n      \"status\": 1\n    },\n    {\n      \"letter\": \"r\",\n      \"status\": 1\n    },\n    {\n      \"letter\": \"o\",\n      \"status\": 1\n    },\n  ],\n  \"attempts\": 2,\n  \"attemptsCount\": 3,\n  \"done\": true\n}\n```\n\nPara controlar los tipos de datos que serán enviados y recibidos, antes de definir los controladores definiremos los DTOs. Estos se encargarán de verificar los tipos de datos y si son obligatiorios o no.\n\n```ts\nexport class responseWord {\n  @IsString()\n  @IsNotEmpty()\n  wordId: string;\n\n  letters: letterStatus[];\n\n  @IsNumber()\n  @IsOptional()\n  attempts: number;\n\n  @IsNumber()\n  @IsOptional()\n  attemptsCount: number;\n\n  @IsBoolean()\n  @IsOptional()\n  done: boolean;\n}\n\ninterface letterStatus {\n  letter: string;\n  status: number;\n}\n```\n\nEn el controlador se definen las rutas de la API y a que servicios seran llamados desde estos.\n\n```ts\n// word.controller.ts\n@Controller('word')\nexport class WordController {\n  constructor(private wordService: WordService) {}\n\n  @Get()\n  findAll() {\n    return this.wordService.findAll();\n  }\n\n  @Get('random')\n  findRandomOne() {\n    return this.wordService.findRandomeOne();\n  }\n\n  @Post()\n  async createWord(@Body() body: CreateWordleDto) {\n    try {\n      return await this.wordService.create(body);\n    } catch (error) {\n      if (error.code === 11000) {\n        throw new ConflictException('Word already exists.');\n      }\n      throw error;\n    }\n  }\n\n  @Post('requestWord')\n  async submitWord(@Body() body: requestWord): Promise<responseWord> {\n    return await this.wordService.requestWord(body);\n  }\n\n  @Delete(':id')\n  @HttpCode(204)\n  async deleteWordle(@Param('id') id: string) {\n    const wordle = await this.wordService.delete(id);\n    if (!wordle) throw new NotFoundException('Word not found');\n    return wordle;\n  }\n}\n```\n\nResultado de llamar a la función `findRandomOne`\n\n![WordleBackend](https://github.com/Elias288/ElelisPage/blob/main/docs/src/assets/WordleBackend.png?raw=true)\n\n## Siguiente paso\n\nCon todo esto ya tenemos una API con el que se puede jugar, lo que faltaría es construir un frontend que permita al jugador ingresarle las palabras y juegar.\n\nEn el siguiente publicación se explica el [desarrollo del frontend de WordleToy](#/blog/post/wordletoy_-_frontend)"},{"id":"primera_publicacion","timestamp":1686313800,"title":"Primera Publicación\r","description":"Primera publicación en el blog, descripción de intenciones y propósitos.\r","date":"June 09, 2023 09:30:00\r","modified_date":"June 12, 2023 18:38:00\r","content":"\r\n# Primera Publicación\r\n\r\nEste *\"blog\"* está orientado a llevar un registro de desarrollo, investigaciones personales de tecnología, curiosidades y más.\r\n\r\nTodo el que quiera está invitado a leer y hacer un seguimiento de todos los temas publicaados aquí, que prometo mantener actualizado.\r\n\r\nLos codigos de los proyectos los podrás encontrar en mi repositorio de github [github.com/Elias288](https://github.com/Elias288?tab=repositories) o en mi espacio de codepen [codepen.io/sbianchi](https://codepen.io/sbianchi).\r\n\r\nEspero que te sea de utlidad todo lo que veas aquí.\r\n\r\n<small style=\"display: block; text-align: right;\">Elias Bianchi</small>\r\n"}]